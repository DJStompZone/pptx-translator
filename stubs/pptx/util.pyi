from _typeshed import Incomplete

class Length(int):
    def __new__(cls, emu): ...
    @property
    def inches(self): ...
    @property
    def centipoints(self): ...
    @property
    def cm(self): ...
    @property
    def emu(self): ...
    @property
    def mm(self): ...
    @property
    def pt(self): ...

class Inches(Length):
    def __new__(cls, inches): ...

class Centipoints(Length):
    def __new__(cls, centipoints): ...

class Cm(Length):
    def __new__(cls, cm): ...

class Emu(Length):
    def __new__(cls, emu): ...

class Mm(Length):
    def __new__(cls, mm): ...

class Pt(Length):
    def __new__(cls, points): ...

class lazyproperty:
    def __init__(self, fget) -> None: ...
    def __get__(self, obj, type: Incomplete | None = None): ...
    def __set__(self, obj, value) -> None: ...
