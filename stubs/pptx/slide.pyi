from _typeshed import Incomplete
from collections.abc import Generator
from pptx.dml.fill import FillFormat as FillFormat
from pptx.enum.shapes import PP_PLACEHOLDER as PP_PLACEHOLDER
from pptx.shapes.shapetree import LayoutPlaceholders as LayoutPlaceholders, LayoutShapes as LayoutShapes, MasterPlaceholders as MasterPlaceholders, MasterShapes as MasterShapes, NotesSlidePlaceholders as NotesSlidePlaceholders, NotesSlideShapes as NotesSlideShapes, SlidePlaceholders as SlidePlaceholders, SlideShapes as SlideShapes
from pptx.shared import ElementProxy as ElementProxy, ParentedElementProxy as ParentedElementProxy, PartElementProxy as PartElementProxy
from pptx.util import lazyproperty as lazyproperty

class _BaseSlide(PartElementProxy):
    def background(self): ...
    @property
    def name(self): ...
    @name.setter
    def name(self, value) -> None: ...

class _BaseMaster(_BaseSlide):
    def placeholders(self): ...
    def shapes(self): ...

class NotesMaster(_BaseMaster): ...

class NotesSlide(_BaseSlide):
    def clone_master_placeholders(self, notes_master) -> None: ...
    @property
    def notes_placeholder(self): ...
    @property
    def notes_text_frame(self): ...
    def placeholders(self): ...
    def shapes(self): ...

class Slide(_BaseSlide):
    @property
    def background(self): ...
    @property
    def follow_master_background(self): ...
    @property
    def has_notes_slide(self): ...
    @property
    def notes_slide(self): ...
    def placeholders(self): ...
    def shapes(self): ...
    @property
    def slide_id(self): ...
    @property
    def slide_layout(self): ...

class Slides(ParentedElementProxy):
    def __init__(self, sldIdLst, prs) -> None: ...
    def __getitem__(self, idx): ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def add_slide(self, slide_layout): ...
    def get(self, slide_id, default: Incomplete | None = None): ...
    def index(self, slide): ...

class SlideLayout(_BaseSlide):
    def iter_cloneable_placeholders(self) -> Generator[Incomplete, None, None]: ...
    def placeholders(self): ...
    def shapes(self): ...
    @property
    def slide_master(self): ...
    @property
    def used_by_slides(self): ...

class SlideLayouts(ParentedElementProxy):
    def __init__(self, sldLayoutIdLst, parent) -> None: ...
    def __getitem__(self, idx): ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def get_by_name(self, name, default: Incomplete | None = None): ...
    def index(self, slide_layout): ...
    def remove(self, slide_layout) -> None: ...

class SlideMaster(_BaseMaster):
    def slide_layouts(self): ...

class SlideMasters(ParentedElementProxy):
    def __init__(self, sldMasterIdLst, parent) -> None: ...
    def __getitem__(self, idx): ...
    def __iter__(self): ...
    def __len__(self) -> int: ...

class _Background(ElementProxy):
    def __init__(self, cSld) -> None: ...
    def fill(self): ...
