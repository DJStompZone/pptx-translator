from _typeshed import Incomplete
from collections.abc import Generator
from pptx.chart.xlsx import BubbleWorkbookWriter as BubbleWorkbookWriter, CategoryWorkbookWriter as CategoryWorkbookWriter, XyWorkbookWriter as XyWorkbookWriter
from pptx.chart.xmlwriter import ChartXmlWriter as ChartXmlWriter
from pptx.compat import Sequence as Sequence
from pptx.util import lazyproperty as lazyproperty

class _BaseChartData(Sequence):
    def __init__(self, number_format: str = 'General') -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def append(self, series): ...
    def data_point_offset(self, series): ...
    @property
    def number_format(self): ...
    def series_index(self, series): ...
    def series_name_ref(self, series): ...
    def x_values_ref(self, series): ...
    @property
    def xlsx_blob(self): ...
    def xml_bytes(self, chart_type): ...
    def y_values_ref(self, series): ...

class _BaseSeriesData(Sequence):
    def __init__(self, chart_data, name, number_format) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
    def append(self, data_point): ...
    @property
    def data_point_offset(self): ...
    @property
    def index(self): ...
    @property
    def name(self): ...
    @property
    def name_ref(self): ...
    @property
    def number_format(self): ...
    @property
    def x_values(self): ...
    @property
    def x_values_ref(self): ...
    @property
    def y_values(self): ...
    @property
    def y_values_ref(self): ...

class _BaseDataPoint:
    def __init__(self, series_data, number_format) -> None: ...
    @property
    def number_format(self): ...

class CategoryChartData(_BaseChartData):
    def add_category(self, label): ...
    def add_series(self, name, values=(), number_format: Incomplete | None = None): ...
    @property
    def categories(self): ...
    @categories.setter
    def categories(self, category_labels) -> None: ...
    @property
    def categories_ref(self): ...
    def values_ref(self, series): ...

class Categories(Sequence):
    def __init__(self) -> None: ...
    def __getitem__(self, idx): ...
    def __len__(self) -> int: ...
    def add_category(self, label): ...
    @property
    def are_dates(self): ...
    @property
    def are_numeric(self): ...
    @property
    def depth(self): ...
    def index(self, category): ...
    @property
    def leaf_count(self): ...
    @property
    def levels(self) -> Generator[Incomplete, None, None]: ...
    @property
    def number_format(self): ...
    @number_format.setter
    def number_format(self, value) -> None: ...

class Category:
    def __init__(self, label, parent) -> None: ...
    def add_sub_category(self, label): ...
    @property
    def depth(self): ...
    @property
    def idx(self): ...
    def index(self, sub_category): ...
    @property
    def leaf_count(self): ...
    @property
    def label(self): ...
    def numeric_str_val(self, date_1904: bool = False): ...
    @property
    def sub_categories(self): ...

class ChartData(CategoryChartData): ...

class CategorySeriesData(_BaseSeriesData):
    def add_data_point(self, value, number_format: Incomplete | None = None): ...
    @property
    def categories(self): ...
    @property
    def categories_ref(self): ...
    @property
    def values(self): ...
    @property
    def values_ref(self): ...

class XyChartData(_BaseChartData):
    def add_series(self, name, number_format: Incomplete | None = None): ...

class BubbleChartData(XyChartData):
    def add_series(self, name, number_format: Incomplete | None = None): ...
    def bubble_sizes_ref(self, series): ...

class XySeriesData(_BaseSeriesData):
    def add_data_point(self, x, y, number_format: Incomplete | None = None): ...

class BubbleSeriesData(XySeriesData):
    def add_data_point(self, x, y, size, number_format: Incomplete | None = None): ...
    @property
    def bubble_sizes(self): ...
    @property
    def bubble_sizes_ref(self): ...

class CategoryDataPoint(_BaseDataPoint):
    def __init__(self, series_data, value, number_format) -> None: ...
    @property
    def value(self): ...

class XyDataPoint(_BaseDataPoint):
    def __init__(self, series_data, x, y, number_format) -> None: ...
    @property
    def x(self): ...
    @property
    def y(self): ...

class BubbleDataPoint(XyDataPoint):
    def __init__(self, series_data, x, y, size, number_format) -> None: ...
    @property
    def bubble_size(self): ...
