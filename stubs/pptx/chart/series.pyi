from _typeshed import Incomplete
from collections.abc import Generator
from pptx.chart.datalabel import DataLabels as DataLabels
from pptx.chart.marker import Marker as Marker
from pptx.chart.point import BubblePoints as BubblePoints, CategoryPoints as CategoryPoints, XyPoints as XyPoints
from pptx.compat import Sequence as Sequence
from pptx.dml.chtfmt import ChartFormat as ChartFormat
from pptx.oxml.ns import qn as qn
from pptx.util import lazyproperty as lazyproperty

class _BaseSeries:
    def __init__(self, ser) -> None: ...
    def format(self): ...
    @property
    def index(self): ...
    @property
    def name(self): ...

class _BaseCategorySeries(_BaseSeries):
    def data_labels(self): ...
    def points(self): ...
    @property
    def values(self): ...

class _MarkerMixin:
    def marker(self): ...

class AreaSeries(_BaseCategorySeries): ...

class BarSeries(_BaseCategorySeries):
    @property
    def invert_if_negative(self): ...
    @invert_if_negative.setter
    def invert_if_negative(self, value) -> None: ...

class LineSeries(_BaseCategorySeries, _MarkerMixin):
    @property
    def smooth(self): ...
    @smooth.setter
    def smooth(self, value) -> None: ...

class PieSeries(_BaseCategorySeries): ...
class RadarSeries(_BaseCategorySeries, _MarkerMixin): ...

class XySeries(_BaseSeries, _MarkerMixin):
    def iter_values(self) -> Generator[Incomplete, None, None]: ...
    def points(self): ...
    @property
    def values(self): ...

class BubbleSeries(XySeries):
    def points(self): ...

class SeriesCollection(Sequence):
    def __init__(self, parent_elm) -> None: ...
    def __getitem__(self, index): ...
    def __len__(self) -> int: ...
