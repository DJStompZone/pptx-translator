from pptx.compat import Container as Container, is_string as is_string
from pptx.exceptions import PackageNotFoundError as PackageNotFoundError
from pptx.opc.oxml import CT_Types as CT_Types, serialize_part_xml as serialize_part_xml
from pptx.opc.packuri import CONTENT_TYPES_URI as CONTENT_TYPES_URI, PACKAGE_URI as PACKAGE_URI, PackURI as PackURI
from pptx.opc.shared import CaseInsensitiveDict as CaseInsensitiveDict
from pptx.opc.spec import default_content_types as default_content_types
from pptx.util import lazyproperty as lazyproperty

class PackageReader(Container):
    def __init__(self, pkg_file) -> None: ...
    def __contains__(self, pack_uri) -> bool: ...
    def __getitem__(self, pack_uri): ...
    def rels_xml_for(self, partname): ...

class PackageWriter:
    def __init__(self, pkg_file, pkg_rels, parts) -> None: ...
    @classmethod
    def write(cls, pkg_file, pkg_rels, parts) -> None: ...

class _PhysPkgReader(Container):
    def __contains__(self, item) -> bool: ...
    @classmethod
    def factory(cls, pkg_file): ...

class _DirPkgReader(_PhysPkgReader):
    def __init__(self, path) -> None: ...
    def __contains__(self, pack_uri) -> bool: ...
    def __getitem__(self, pack_uri): ...

class _ZipPkgReader(_PhysPkgReader):
    def __init__(self, pkg_file) -> None: ...
    def __contains__(self, pack_uri) -> bool: ...
    def __getitem__(self, pack_uri): ...

class _PhysPkgWriter:
    @classmethod
    def factory(cls, pkg_file): ...

class _ZipPkgWriter(_PhysPkgWriter):
    def __init__(self, pkg_file) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: type[BaseException] | None, exc_value: BaseException | None, exc_traceback: types.TracebackType | None) -> None: ...
    def write(self, pack_uri, blob) -> None: ...

class _ContentTypesItem:
    def __init__(self, parts) -> None: ...
    @classmethod
    def xml_for(cls, parts): ...
