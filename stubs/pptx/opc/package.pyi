from _typeshed import Incomplete
from collections.abc import Generator
from pptx.compat import Mapping as Mapping, is_string as is_string
from pptx.opc.oxml import CT_Relationships as CT_Relationships, serialize_part_xml as serialize_part_xml
from pptx.opc.packuri import CONTENT_TYPES_URI as CONTENT_TYPES_URI, PACKAGE_URI as PACKAGE_URI, PackURI as PackURI
from pptx.opc.serialized import PackageReader as PackageReader, PackageWriter as PackageWriter
from pptx.opc.shared import CaseInsensitiveDict as CaseInsensitiveDict
from pptx.oxml import parse_xml as parse_xml
from pptx.util import lazyproperty as lazyproperty

class _RelatableMixin:
    def part_related_by(self, reltype): ...
    def relate_to(self, target, reltype, is_external: bool = False): ...
    def related_part(self, rId): ...
    def target_ref(self, rId): ...

class OpcPackage(_RelatableMixin):
    def __init__(self, pkg_file) -> None: ...
    @classmethod
    def open(cls, pkg_file): ...
    def drop_rel(self, rId) -> None: ...
    def iter_parts(self) -> Generator[Incomplete, None, None]: ...
    def iter_rels(self) -> Generator[Incomplete, None, None]: ...
    @property
    def main_document_part(self): ...
    def next_partname(self, tmpl): ...
    def save(self, pkg_file) -> None: ...

class _PackageLoader:
    def __init__(self, pkg_file, package) -> None: ...
    @classmethod
    def load(cls, pkg_file, package): ...

class Part(_RelatableMixin):
    def __init__(self, partname, content_type, package, blob: Incomplete | None = None) -> None: ...
    @classmethod
    def load(cls, partname, content_type, package, blob): ...
    @property
    def blob(self): ...
    @blob.setter
    def blob(self, bytes_) -> None: ...
    def content_type(self): ...
    def drop_rel(self, rId) -> None: ...
    def load_rels_from_xml(self, xml_rels, parts) -> None: ...
    def package(self): ...
    @property
    def partname(self): ...
    @partname.setter
    def partname(self, partname) -> None: ...
    def rels(self): ...

class XmlPart(Part):
    def __init__(self, partname, content_type, package, element) -> None: ...
    @classmethod
    def load(cls, partname, content_type, package, blob): ...
    @property
    def blob(self): ...
    @property
    def part(self): ...

class PartFactory:
    part_type_for: Incomplete
    def __new__(cls, partname, content_type, package, blob): ...

class _ContentTypeMap:
    def __init__(self, overrides, defaults) -> None: ...
    def __getitem__(self, partname): ...
    @classmethod
    def from_xml(cls, content_types_xml): ...

class _Relationships(Mapping):
    def __init__(self, base_uri) -> None: ...
    def __contains__(self, rId) -> bool: ...
    def __getitem__(self, rId): ...
    def __iter__(self): ...
    def __len__(self) -> int: ...
    def get_or_add(self, reltype, target_part): ...
    def get_or_add_ext_rel(self, reltype, target_ref): ...
    def load_from_xml(self, base_uri, xml_rels, parts) -> None: ...
    def part_with_reltype(self, reltype): ...
    def pop(self, rId): ...
    @property
    def xml(self): ...

class _Relationship:
    def __init__(self, base_uri, rId, reltype, target_mode, target) -> None: ...
    @classmethod
    def from_xml(cls, base_uri, rel, parts): ...
    def is_external(self): ...
    def reltype(self): ...
    def rId(self): ...
    def target_part(self): ...
    def target_partname(self): ...
    def target_ref(self): ...
