from pptx.compat import is_integer as is_integer
from pptx.dml.fill import FillFormat as FillFormat
from pptx.oxml.table import TcRange as TcRange
from pptx.shapes import Subshape as Subshape
from pptx.text.text import TextFrame as TextFrame
from pptx.util import lazyproperty as lazyproperty

class Table:
    def __init__(self, tbl, graphic_frame) -> None: ...
    def cell(self, row_idx, col_idx): ...
    def columns(self): ...
    @property
    def first_col(self): ...
    @first_col.setter
    def first_col(self, value) -> None: ...
    @property
    def first_row(self): ...
    @first_row.setter
    def first_row(self, value) -> None: ...
    @property
    def horz_banding(self): ...
    @horz_banding.setter
    def horz_banding(self, value) -> None: ...
    def iter_cells(self): ...
    @property
    def last_col(self): ...
    @last_col.setter
    def last_col(self, value) -> None: ...
    @property
    def last_row(self): ...
    @last_row.setter
    def last_row(self, value) -> None: ...
    def notify_height_changed(self) -> None: ...
    def notify_width_changed(self) -> None: ...
    @property
    def part(self): ...
    def rows(self): ...
    @property
    def vert_banding(self): ...
    @vert_banding.setter
    def vert_banding(self, value) -> None: ...

class _Cell(Subshape):
    def __init__(self, tc, parent) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def fill(self): ...
    @property
    def is_merge_origin(self): ...
    @property
    def is_spanned(self): ...
    @property
    def margin_left(self): ...
    @margin_left.setter
    def margin_left(self, margin_left) -> None: ...
    @property
    def margin_right(self): ...
    @margin_right.setter
    def margin_right(self, margin_right) -> None: ...
    @property
    def margin_top(self): ...
    @margin_top.setter
    def margin_top(self, margin_top) -> None: ...
    @property
    def margin_bottom(self): ...
    @margin_bottom.setter
    def margin_bottom(self, margin_bottom) -> None: ...
    def merge(self, other_cell) -> None: ...
    @property
    def span_height(self): ...
    @property
    def span_width(self): ...
    def split(self) -> None: ...
    @property
    def text(self): ...
    @text.setter
    def text(self, text) -> None: ...
    @property
    def text_frame(self): ...
    @property
    def vertical_anchor(self): ...
    @vertical_anchor.setter
    def vertical_anchor(self, mso_anchor_idx) -> None: ...

class _Column(Subshape):
    def __init__(self, gridCol, parent) -> None: ...
    @property
    def width(self): ...
    @width.setter
    def width(self, width) -> None: ...

class _Row(Subshape):
    def __init__(self, tr, parent) -> None: ...
    @property
    def cells(self): ...
    @property
    def height(self): ...
    @height.setter
    def height(self, height) -> None: ...

class _CellCollection(Subshape):
    def __init__(self, tr, parent) -> None: ...
    def __getitem__(self, idx): ...
    def __iter__(self): ...
    def __len__(self) -> int: ...

class _ColumnCollection(Subshape):
    def __init__(self, tbl, parent) -> None: ...
    def __getitem__(self, idx): ...
    def __len__(self) -> int: ...
    def notify_width_changed(self) -> None: ...

class _RowCollection(Subshape):
    def __init__(self, tbl, parent) -> None: ...
    def __getitem__(self, idx): ...
    def __len__(self) -> int: ...
    def notify_height_changed(self) -> None: ...
