from . import oxml_parser as oxml_parser
from ..compat import Unicode as Unicode
from ..exc import InvalidXmlError as InvalidXmlError
from ..util import lazyproperty as lazyproperty
from .ns import NamespacePrefixedTag as NamespacePrefixedTag, qn as qn
from _typeshed import Incomplete
from lxml import etree

def OxmlElement(nsptag_str, nsmap: Incomplete | None = None): ...
def serialize_for_reading(element): ...

class XmlString(Unicode):
    def __eq__(self, other): ...
    def __ne__(self, other): ...

class MetaOxmlElement(type):
    def __init__(cls, clsname, bases, clsdict) -> None: ...

class BaseAttribute:
    def __init__(self, attr_name, simple_type) -> None: ...
    def populate_class_members(self, element_cls, prop_name) -> None: ...

class OptionalAttribute(BaseAttribute):
    def __init__(self, attr_name, simple_type, default: Incomplete | None = None) -> None: ...

class RequiredAttribute(BaseAttribute): ...

class _BaseChildElement:
    def __init__(self, nsptagname, successors=()) -> None: ...
    def populate_class_members(self, element_cls, prop_name) -> None: ...

class Choice(_BaseChildElement):
    @property
    def nsptagname(self): ...
    def populate_class_members(self, element_cls, group_prop_name, successors) -> None: ...

class OneAndOnlyOne(_BaseChildElement):
    def __init__(self, nsptagname) -> None: ...
    def populate_class_members(self, element_cls, prop_name) -> None: ...

class OneOrMore(_BaseChildElement):
    def populate_class_members(self, element_cls, prop_name) -> None: ...

class ZeroOrMore(_BaseChildElement):
    def populate_class_members(self, element_cls, prop_name) -> None: ...

class ZeroOrOne(_BaseChildElement):
    def populate_class_members(self, element_cls, prop_name) -> None: ...

class ZeroOrOneChoice(_BaseChildElement):
    def __init__(self, choices, successors=()) -> None: ...
    def populate_class_members(self, element_cls, prop_name) -> None: ...

class _OxmlElementBase(etree.ElementBase):
    @classmethod
    def child_tagnames_after(cls, tagname): ...
    def delete(self) -> None: ...
    def first_child_found_in(self, *tagnames): ...
    def insert_element_before(self, elm, *tagnames): ...
    def remove_all(self, tagname) -> None: ...
    def remove_if_present(self, *tagnames) -> None: ...
    @property
    def xml(self): ...
    def xpath(self, xpath_str): ...

BaseOxmlElement: Incomplete
