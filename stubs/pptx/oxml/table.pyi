from _typeshed import Incomplete
from collections.abc import Generator
from pptx.enum.text import MSO_VERTICAL_ANCHOR as MSO_VERTICAL_ANCHOR
from pptx.oxml import parse_xml as parse_xml
from pptx.oxml.dml.fill import CT_GradientFillProperties as CT_GradientFillProperties
from pptx.oxml.ns import nsdecls as nsdecls
from pptx.oxml.simpletypes import ST_Coordinate as ST_Coordinate, ST_Coordinate32 as ST_Coordinate32, XsdBoolean as XsdBoolean, XsdInt as XsdInt
from pptx.oxml.text import CT_TextBody as CT_TextBody
from pptx.oxml.xmlchemy import BaseOxmlElement as BaseOxmlElement, Choice as Choice, OneAndOnlyOne as OneAndOnlyOne, OptionalAttribute as OptionalAttribute, RequiredAttribute as RequiredAttribute, ZeroOrMore as ZeroOrMore, ZeroOrOne as ZeroOrOne, ZeroOrOneChoice as ZeroOrOneChoice
from pptx.util import Emu as Emu, lazyproperty as lazyproperty

class CT_Table(BaseOxmlElement):
    tblPr: Incomplete
    tblGrid: Incomplete
    tr: Incomplete
    def add_tr(self, height): ...
    @property
    def bandCol(self): ...
    @bandCol.setter
    def bandCol(self, value) -> None: ...
    @property
    def bandRow(self): ...
    @bandRow.setter
    def bandRow(self, value) -> None: ...
    @property
    def firstCol(self): ...
    @firstCol.setter
    def firstCol(self, value) -> None: ...
    @property
    def firstRow(self): ...
    @firstRow.setter
    def firstRow(self, value) -> None: ...
    def iter_tcs(self): ...
    @property
    def lastCol(self): ...
    @lastCol.setter
    def lastCol(self, value) -> None: ...
    @property
    def lastRow(self): ...
    @lastRow.setter
    def lastRow(self, value) -> None: ...
    @classmethod
    def new_tbl(cls, rows, cols, width, height, tableStyleId: Incomplete | None = None): ...
    def tc(self, row_idx, col_idx): ...

class CT_TableCell(BaseOxmlElement):
    txBody: Incomplete
    tcPr: Incomplete
    gridSpan: Incomplete
    rowSpan: Incomplete
    hMerge: Incomplete
    vMerge: Incomplete
    @property
    def anchor(self): ...
    @anchor.setter
    def anchor(self, anchor_enum_idx) -> None: ...
    def append_ps_from(self, spanned_tc) -> None: ...
    @property
    def col_idx(self): ...
    @property
    def is_merge_origin(self): ...
    @property
    def is_spanned(self): ...
    @property
    def marT(self): ...
    @marT.setter
    def marT(self, value) -> None: ...
    @property
    def marR(self): ...
    @marR.setter
    def marR(self, value) -> None: ...
    @property
    def marB(self): ...
    @marB.setter
    def marB(self, value) -> None: ...
    @property
    def marL(self): ...
    @marL.setter
    def marL(self, value) -> None: ...
    @classmethod
    def new(cls): ...
    @property
    def row_idx(self): ...
    @property
    def tbl(self): ...
    @property
    def text(self): ...

class CT_TableCellProperties(BaseOxmlElement):
    eg_fillProperties: Incomplete
    anchor: Incomplete
    marL: Incomplete
    marR: Incomplete
    marT: Incomplete
    marB: Incomplete

class CT_TableCol(BaseOxmlElement):
    w: Incomplete

class CT_TableGrid(BaseOxmlElement):
    gridCol: Incomplete
    def add_gridCol(self, width): ...

class CT_TableProperties(BaseOxmlElement):
    bandRow: Incomplete
    bandCol: Incomplete
    firstRow: Incomplete
    firstCol: Incomplete
    lastRow: Incomplete
    lastCol: Incomplete

class CT_TableRow(BaseOxmlElement):
    tc: Incomplete
    h: Incomplete
    def add_tc(self): ...
    @property
    def row_idx(self): ...

class TcRange:
    def __init__(self, tc, other_tc) -> None: ...
    @classmethod
    def from_merge_origin(cls, tc): ...
    def contains_merged_cell(self): ...
    def dimensions(self): ...
    def in_same_table(self): ...
    def iter_except_left_col_tcs(self) -> Generator[Incomplete, None, None]: ...
    def iter_except_top_row_tcs(self) -> Generator[Incomplete, None, None]: ...
    def iter_left_col_tcs(self) -> Generator[Incomplete, None, None]: ...
    def iter_tcs(self): ...
    def iter_top_row_tcs(self) -> Generator[Incomplete, None, None]: ...
    def move_content_to_origin(self) -> None: ...
