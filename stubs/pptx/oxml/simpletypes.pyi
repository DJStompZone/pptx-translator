from _typeshed import Incomplete
from pptx.exc import InvalidXmlError as InvalidXmlError
from pptx.util import Centipoints as Centipoints, Emu as Emu

class BaseSimpleType:
    @classmethod
    def from_xml(cls, str_value): ...
    @classmethod
    def to_xml(cls, value): ...
    @classmethod
    def validate_float(cls, value) -> None: ...
    @classmethod
    def validate_int(cls, value) -> None: ...
    @classmethod
    def validate_float_in_range(cls, value, min_inclusive, max_inclusive) -> None: ...
    @classmethod
    def validate_int_in_range(cls, value, min_inclusive, max_inclusive) -> None: ...
    @classmethod
    def validate_string(cls, value): ...

class BaseFloatType(BaseSimpleType):
    @classmethod
    def convert_from_xml(cls, str_value): ...
    @classmethod
    def convert_to_xml(cls, value): ...
    @classmethod
    def validate(cls, value) -> None: ...

class BaseIntType(BaseSimpleType):
    @classmethod
    def convert_from_percent_literal(cls, str_value): ...
    @classmethod
    def convert_from_xml(cls, str_value): ...
    @classmethod
    def convert_to_xml(cls, value): ...
    @classmethod
    def validate(cls, value) -> None: ...

class BaseStringType(BaseSimpleType):
    @classmethod
    def convert_from_xml(cls, str_value): ...
    @classmethod
    def convert_to_xml(cls, value): ...
    @classmethod
    def validate(cls, value) -> None: ...

class BaseStringEnumerationType(BaseStringType):
    @classmethod
    def validate(cls, value) -> None: ...

class XsdAnyUri(BaseStringType): ...

class XsdBoolean(BaseSimpleType):
    @classmethod
    def convert_from_xml(cls, str_value): ...
    @classmethod
    def convert_to_xml(cls, value): ...
    @classmethod
    def validate(cls, value) -> None: ...

class XsdDouble(BaseFloatType): ...
class XsdId(BaseStringType): ...

class XsdInt(BaseIntType):
    @classmethod
    def validate(cls, value) -> None: ...

class XsdLong(BaseIntType):
    @classmethod
    def validate(cls, value) -> None: ...

class XsdString(BaseStringType): ...
class XsdStringEnumeration(BaseStringEnumerationType): ...
class XsdToken(BaseStringType): ...
class XsdTokenEnumeration(BaseStringEnumerationType): ...

class XsdUnsignedByte(BaseIntType):
    @classmethod
    def validate(cls, value) -> None: ...

class XsdUnsignedInt(BaseIntType):
    @classmethod
    def validate(cls, value) -> None: ...

class XsdUnsignedShort(BaseIntType):
    @classmethod
    def validate(cls, value) -> None: ...

class ST_Angle(XsdInt):
    DEGREE_INCREMENTS: int
    THREE_SIXTY: Incomplete
    @classmethod
    def convert_from_xml(cls, str_value): ...
    @classmethod
    def convert_to_xml(cls, value): ...
    @classmethod
    def validate(cls, value) -> None: ...

class ST_AxisUnit(XsdDouble):
    @classmethod
    def validate(cls, value) -> None: ...

class ST_BarDir(XsdStringEnumeration):
    BAR: str
    COL: str

class ST_BubbleScale(BaseIntType):
    @classmethod
    def convert_from_xml(cls, str_value): ...
    @classmethod
    def validate(cls, value) -> None: ...

class ST_ContentType(XsdString): ...

class ST_Coordinate(BaseSimpleType):
    @classmethod
    def convert_from_xml(cls, str_value): ...
    @classmethod
    def convert_to_xml(cls, value): ...
    @classmethod
    def validate(cls, value) -> None: ...

class ST_Coordinate32(BaseSimpleType):
    @classmethod
    def convert_from_xml(cls, str_value): ...
    @classmethod
    def convert_to_xml(cls, value): ...
    @classmethod
    def validate(cls, value) -> None: ...

class ST_Coordinate32Unqualified(XsdInt):
    @classmethod
    def convert_from_xml(cls, str_value): ...

class ST_CoordinateUnqualified(XsdLong):
    @classmethod
    def validate(cls, value) -> None: ...

class ST_Direction(XsdTokenEnumeration):
    HORZ: str
    VERT: str

class ST_DrawingElementId(XsdUnsignedInt): ...
class ST_Extension(XsdString): ...

class ST_GapAmount(BaseIntType):
    @classmethod
    def convert_from_xml(cls, str_value): ...
    @classmethod
    def validate(cls, value) -> None: ...

class ST_Grouping(XsdStringEnumeration):
    CLUSTERED: str
    PERCENT_STACKED: str
    STACKED: str
    STANDARD: str

class ST_HexColorRGB(BaseStringType):
    @classmethod
    def convert_to_xml(cls, value): ...
    @classmethod
    def validate(cls, value) -> None: ...

class ST_LayoutMode(XsdStringEnumeration):
    EDGE: str
    FACTOR: str

class ST_LblOffset(XsdUnsignedShort):
    @classmethod
    def convert_from_xml(cls, str_value): ...
    @classmethod
    def validate(cls, value) -> None: ...

class ST_LineWidth(XsdInt):
    @classmethod
    def convert_from_xml(cls, str_value): ...
    @classmethod
    def validate(cls, value) -> None: ...

class ST_MarkerSize(XsdUnsignedByte):
    @classmethod
    def validate(cls, value) -> None: ...

class ST_Orientation(XsdStringEnumeration):
    MAX_MIN: str
    MIN_MAX: str

class ST_Overlap(BaseIntType):
    @classmethod
    def convert_from_xml(cls, str_value): ...
    @classmethod
    def validate(cls, value) -> None: ...

class ST_Percentage(BaseIntType):
    @classmethod
    def convert_from_xml(cls, str_value): ...
    @classmethod
    def convert_to_xml(cls, value): ...
    @classmethod
    def validate(cls, value) -> None: ...

class ST_PlaceholderSize(XsdTokenEnumeration):
    FULL: str
    HALF: str
    QUARTER: str

class ST_PositiveCoordinate(XsdLong):
    @classmethod
    def convert_from_xml(cls, str_value): ...
    @classmethod
    def validate(cls, value) -> None: ...

class ST_PositiveFixedAngle(ST_Angle):
    @classmethod
    def convert_to_xml(cls, degrees): ...

class ST_PositiveFixedPercentage(ST_Percentage):
    @classmethod
    def validate(cls, value) -> None: ...

class ST_RelationshipId(XsdString): ...

class ST_SlideId(XsdUnsignedInt):
    @classmethod
    def validate(cls, value) -> None: ...

class ST_SlideSizeCoordinate(BaseIntType):
    @classmethod
    def convert_from_xml(cls, str_value): ...
    @classmethod
    def validate(cls, value) -> None: ...

class ST_Style(XsdUnsignedByte):
    @classmethod
    def validate(cls, value) -> None: ...

class ST_TargetMode(XsdString):
    @classmethod
    def validate(cls, value) -> None: ...

class ST_TextFontScalePercentOrPercentString(BaseFloatType):
    @classmethod
    def convert_from_xml(cls, str_value): ...
    @classmethod
    def convert_to_xml(cls, value): ...
    @classmethod
    def validate(cls, value) -> None: ...

class ST_TextFontSize(BaseIntType):
    @classmethod
    def validate(cls, value) -> None: ...

class ST_TextIndentLevelType(BaseIntType):
    @classmethod
    def validate(cls, value) -> None: ...

class ST_TextSpacingPercentOrPercentString(BaseFloatType):
    @classmethod
    def convert_from_xml(cls, str_value): ...
    @classmethod
    def convert_to_xml(cls, value): ...
    @classmethod
    def validate(cls, value) -> None: ...

class ST_TextSpacingPoint(BaseIntType):
    @classmethod
    def convert_from_xml(cls, str_value): ...
    @classmethod
    def convert_to_xml(cls, value): ...
    @classmethod
    def validate(cls, value) -> None: ...

class ST_TextTypeface(XsdString): ...

class ST_TextWrappingType(XsdTokenEnumeration):
    NONE: str
    SQUARE: str

class ST_UniversalMeasure(BaseSimpleType):
    @classmethod
    def convert_from_xml(cls, str_value): ...
