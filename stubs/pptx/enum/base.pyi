from _typeshed import Incomplete

def alias(*aliases): ...

class _DocsPageFormatter:
    def __init__(self, clsname, clsdict) -> None: ...
    @property
    def page_str(self): ...

class MetaEnumeration(type):
    def __new__(meta, clsname, bases, clsdict): ...

class EnumerationBase:
    __members__: Incomplete
    __ms_name__: str
    @classmethod
    def validate(cls, value) -> None: ...

Enumeration: Incomplete

class XmlEnumeration(Enumeration):
    __members__: Incomplete
    __ms_name__: str
    @classmethod
    def from_xml(cls, xml_val): ...
    @classmethod
    def to_xml(cls, enum_val): ...

class EnumMember:
    def __init__(self, name, value, docstring) -> None: ...
    def add_to_enum(self, clsdict) -> None: ...
    @property
    def docstring(self): ...
    @property
    def name(self): ...
    def register_name(self, clsdict) -> None: ...
    @property
    def valid_settings(self): ...
    @property
    def value(self): ...

class EnumValue(int):
    def __new__(cls, member_name, int_value, docstring): ...
    def __init__(self, member_name, int_value, docstring) -> None: ...
    @property
    def __doc__(self): ...

class ReturnValueOnlyEnumMember(EnumMember):
    @property
    def valid_settings(self): ...

class XmlMappedEnumMember(EnumMember):
    def __init__(self, name, value, xml_value, docstring) -> None: ...
    def add_to_enum(self, clsdict) -> None: ...
    def register_xml_mapping(self, clsdict) -> None: ...
    @property
    def xml_value(self): ...
